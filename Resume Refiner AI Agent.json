{
  "name": "Resume Refiner AI Agent",
  "nodes": [
    {
      "parameters": {
        "formTitle": "Resume Refiner AI Agent",
        "formDescription": "Upload your resume and get suggestions on how to tailor it to fit the job description of your choice.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Resume",
              "fieldType": "file",
              "multipleFiles": false,
              "requiredField": true
            },
            {
              "fieldLabel": "Job",
              "placeholder": "Paste job description link",
              "requiredField": true
            },
            {
              "fieldLabel": "Email",
              "fieldType": "email",
              "placeholder": "Enter your email address",
              "requiredField": true
            }
          ]
        },
        "options": {
          "buttonLabel": "Refine My Resume"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -2384,
        -224
      ],
      "id": "44fc5a92-4a55-4f75-94d1-68a0f0369629",
      "name": "On form submission",
      "webhookId": "e4bffba3-70a9-4e61-a889-7dc84316c10d"
    },
    {
      "parameters": {
        "url": "={{ $json.jobLink }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2000,
        -224
      ],
      "id": "3196642e-745b-49c6-ab08-a9935fcd9d0f",
      "name": "HTTP Request",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "cleanJobDescriptionText",
              "cssSelector": "body",
              "skipSelectors": "script, style, header, footer, nav, form, img, iframe, .sidebar, .ad-banner, .popup, [role=\"navigation\"], [aria-hidden=\"true\"]"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -1792,
        -224
      ],
      "id": "91e310d8-b49f-4e30-81a8-b88cf8f3f98e",
      "name": "HTML"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Job Description:\n{{ $json.cleanJobDescriptionText }}\n\n---\n\nThe desired job role is: {{ $json.jobLink }} // Pass the job link here, as it contains the context.\n\n---\n\nAnalyze the job description for the provided job role. Generate a JSON object containing the email's subject line and its HTML body, focusing only on the specific sections for resume suggestions.\n\nThe HTML email body MUST be formatted with specific HTML <h2> headings and <ul><li> lists as follows:\n\n<h2>Actionable Suggestions to Improve the Resume:</h2>\n<ul>\n<li>[Detailed, specific suggestion 1]</li>\n<li>[Detailed, specific suggestion 2]</li>\n<li>...</li>\n</ul>\n\n<h2>Keywords/Phrases from Job Description:</h2>\n<ul>\n<li>[Relevant keyword/phrase 1 from job role]</li>\n<li>[Relevant keyword/phrase 2 from job role]</li>\n<li>...</li>\n</ul>\n\nYour output MUST be a valid JSON object following this exact schema:\n```json\n{\n  \"subject\": \"string\",\n  \"body\": \"string\"\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -1584,
        -224
      ],
      "id": "2b5e0a45-7b89-4f2f-a847-b22e67057320",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "gpt-4-turbo"
        },
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1600,
        16
      ],
      "id": "74d55d5c-50b4-4ca2-b4cc-5aeae9f3adab",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "XjyVuRS7i0Jva41f",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "={\n  \"type\": \"object\",\n  \"properties\": {\n    \"subject\": { \"type\": \"string\" },\n    \"body\": { \"type\": \"string\" }\n  },\n  \"required\": [\"subject\", \"body\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1392,
        0
      ],
      "id": "1e681c80-8853-4db1-9ac2-87155c731eca",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f6c0ebda-e9a1-42bb-bcb5-f131241ebde6",
              "name": "jobLink",
              "value": "={{ $json['Job'] }}",
              "type": "string"
            },
            {
              "id": "c4ad7d44-176b-48b1-a15a-6c9b781c207c",
              "name": "userEmail",
              "value": "={{ $json['Email'] }}",
              "type": "string"
            },
            {
              "id": "dcc0f98b-2ab2-4909-b397-d2af79ece09c",
              "name": "resumeBinary",
              "value": "={{ $json.Resume }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2192,
        -224
      ],
      "id": "1428354c-702a-422f-96de-3691bd4179fd",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const inputItemFromFormTrigger = Array.isArray($json) ? $json[0] : $json;\n\n// Safely get the binary data object\nlet originalResumeBinaryData = null;\nif ($binary && $binary['Resume']) {\n    originalResumeBinaryData = $binary['Resume'];\n}\n\n// Output 1: For Resume processing (contains original jobLink/email as meta)\nconst resumeProcessingItem = {\n    json: {\n        // Keep original data for reference/debugging\n        Job: inputItemFromFormTrigger['Job'],\n        Email: inputItemFromFormTrigger['Email'],\n        // Add reference to binary data for Extract From File node\n        resumeBinaryDataRef: originalResumeBinaryData\n    },\n    binary: { // Attach the actual binary for Extract From File\n        resumeBinary: originalResumeBinaryData\n    }\n};\n\n// Output 2: For direct jobLink use (contains original jobLink/email)\nconst jobLinkItem = {\n    json: {\n        Job: inputItemFromFormTrigger['Job'], // The actual URL string\n        Email: inputItemFromFormTrigger['Email']\n    }\n};\n\n// Return an array of these two separate items.\n// Item 1: has binary (for Extract From File) and JSON data.\n// Item 2: has only JSON data (for HTTP Request directly).\nreturn [resumeProcessingItem, jobLinkItem];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        -528
      ],
      "id": "782424e6-b09e-4465-862a-06fc1024ae78",
      "name": "Code"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const inputItemFromFormTrigger = Array.isArray($json) ? $json[0] : $json;\n\n// Safely get the binary data object\nlet originalResumeBinaryData = null;\nif ($binary && $binary['Resume']) {\n    originalResumeBinaryData = $binary['Resume'];\n}\n\n// Output 1: For Resume processing (contains original jobLink/email as meta)\nconst resumeProcessingItem = {\n    json: {\n        // Keep original data for reference/debugging\n        Job: inputItemFromFormTrigger['Job'],\n        Email: inputItemFromFormTrigger['Email'],\n        // Add reference to binary data for Extract From File node\n        resumeBinaryDataRef: originalResumeBinaryData\n    },\n    binary: { // Attach the actual binary for Extract From File\n        resumeBinary: originalResumeBinaryData\n    }\n};\n\n// Output 2: For direct jobLink use (contains original jobLink/email)\nconst jobLinkItem = {\n    json: {\n        Job: inputItemFromFormTrigger['Job'], // The actual URL string\n        Email: inputItemFromFormTrigger['Email']\n    }\n};\n\n// Return an array of these two separate items.\n// Item 1: has binary (for Extract From File) and JSON data.\n// Item 2: has only JSON data (for HTTP Request directly).\nreturn [resumeProcessingItem, jobLinkItem];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2160,
        -544
      ],
      "id": "28d57041-1c40-4e1b-84ca-6c88bf518f9f",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "cleanJobDescriptionText",
              "cssSelector": "body",
              "skipSelectors": "script, style, header, footer, nav, form, img, iframe, .sidebar, .ad-banner, .popup, [role=\"navigation\"], [aria-hidden=\"true\"]"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -1936,
        -544
      ],
      "id": "fcc77b48-c225-4584-9134-a9c945f324ac",
      "name": "HTML1"
    },
    {
      "parameters": {
        "url": "={{ $json.jobLink }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1200,
        -560
      ],
      "id": "8c978bb2-7caa-49fb-95b7-4553c6c7ed87",
      "name": "HTTP Request1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "sendTo": "={{ $json.emailRecipient }}",
        "subject": "={{ $json.emailSubject }}",
        "message": "={{ $json.emailBody }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -976,
        -224
      ],
      "id": "f03d63e1-81f8-4a94-880f-eb47892c467e",
      "name": "Send a message",
      "webhookId": "e588f9c3-4b7b-4c8f-bdc1-c2c8b0c01e1b",
      "credentials": {
        "gmailOAuth2": {
          "id": "0bvVoDhaEl0idi6J",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cf137d9d-4cc1-4597-a257-d651ca93c2f5",
              "name": "emailSubject",
              "value": "={{ $json.output.subject }}",
              "type": "string"
            },
            {
              "id": "3dc786c4-bb9d-4f34-8629-7b3fc457639d",
              "name": "emailBody",
              "value": "=<p>Hi there,</p>\n\n<h2>Actionable Suggestions to Improve the Resume:</h2>\n<ul>\n{{ $json.output.coreJobRequirements.map(req => `<li>${req}</li>`).join('\\n') }}\n</ul>\n\n<h2>Keywords/Phrases from Job Description:</h2>\n<ul>\n{{ $json.output.tailoringSuggestions.map(suggestion => `<li>${suggestion}</li>`).join('\\n') }}\n</ul>\n\n<p>Best of luck with your application!</p>\n\n<p>Sincerely,<br>The Resume Refiner AI Agent Team</p>",
              "type": "string"
            },
            {
              "id": "9be887bd-0fe4-43a4-a0e5-7956581f66d9",
              "name": "emailRecipient",
              "value": "={{ $json.userEmail }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1184,
        -224
      ],
      "id": "7fe2f626-8344-429b-8e72-02449c097cc7",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const inputItem = Array.isArray($json) ? $json[0] : $json; // Get the single input item\n\n// Access AI-generated data (output from AI Agent is assumed to be in item.json)\nconst emailSubject = inputItem.json.subject;\nconst emailBody = inputItem.json.body;\n\n// *** CRITICAL: Re-access the original user email DIRECTLY from the Form Trigger's output ***\n// This bypasses ALL intermediate nodes for the email address.\n// We assume the Form Trigger's output is accessible via $json.parameters or similar global variable.\n// If $json.parameters is not how it's accessed, you'll need to check the Form Trigger's output again.\n// As a last resort, we rely on the specific global access.\nconst originalUserEmail = inputItem.Email; // Try accessing it directly as it was in the initial Form Trigger output\n// If that fails, it might be in: const originalUserEmail = inputItem.json.Email;\n// Or if form data is under a specific object: const originalUserEmail = inputItem.json.form.Email;\n\n// Create the single output item for Gmail\nreturn {\n  json: {\n    emailSubject: emailSubject,\n    emailBody: emailBody,\n    emailRecipient: originalUserEmail // Pass the email address reliably here\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1696,
        -544
      ],
      "id": "0c395586-d48a-4480-8ed7-17c586da76bc",
      "name": "Code3"
    }
  ],
  "pinData": {},
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "738a386a-5716-4f32-b862-e058c0b8c7c0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "430b93a5573a8847bd6377cffddc5db70008ddc81d3e04e44f40ace86f670cd8"
  },
  "id": "Spiv7LUzKkTBBH8w",
  "tags": []
}